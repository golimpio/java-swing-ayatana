<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<!-- By default, only the Clean and Build commands use this build script. -->
<!-- Commands such as Run, Debug, and Test only use this build script if -->
<!-- the Compile on Save feature is turned off for the project. -->
<!-- You can turn off the Compile on Save (or Deploy on Save) setting -->
<!-- in the project's Project Properties dialog box.-->
<project name="jayatana" default="default" basedir=".">
	<description>Builds, tests, and runs the project jayatana.</description>
	<import file="nbproject/build-impl.xml"/>
    <!--

    There exist several targets which are by default empty and which can be 
    used for execution of your tasks. These targets are usually executed 
    before and after some main targets. They are: 

      -pre-init:                 called before initialization of project properties
      -post-init:                called after initialization of project properties
      -pre-compile:              called before javac compilation
      -post-compile:             called after javac compilation
      -pre-compile-single:       called before javac compilation of single file
      -post-compile-single:      called after javac compilation of single file
      -pre-compile-test:         called before javac compilation of JUnit tests
      -post-compile-test:        called after javac compilation of JUnit tests
      -pre-compile-test-single:  called before javac compilation of single JUnit test
      -post-compile-test-single: called after javac compilation of single JUunit test
      -pre-jar:                  called before JAR building
      -post-jar:                 called after JAR building
      -post-clean:               called after cleaning build products

    (Targets beginning with '-' are not intended to be called on their own.)

    Example of inserting an obfuscator after compilation could look like this:

        <target name="-post-compile">
            <obfuscate>
                <fileset dir="${build.classes.dir}"/>
            </obfuscate>
        </target>

    For list of available properties check the imported 
    nbproject/build-impl.xml file. 


    Another way to customize the build is by overriding existing main targets.
    The targets of interest are: 

      -init-macrodef-javac:     defines macro for javac compilation
      -init-macrodef-junit:     defines macro for junit execution
      -init-macrodef-debug:     defines macro for class debugging
      -init-macrodef-java:      defines macro for class execution
      -do-jar-with-manifest:    JAR building (if you are using a manifest)
      -do-jar-without-manifest: JAR building (if you are not using a manifest)
      run:                      execution of project 
      -javadoc-build:           Javadoc generation
      test-report:              JUnit report generation

    An example of overriding the target for project execution could look like this:

        <target name="run" depends="jayatana-impl.jar">
            <exec dir="bin" executable="launcher.exe">
                <arg file="${dist.jar}"/>
            </exec>
        </target>

    Notice that the overridden target depends on the jar target and not only on 
    the compile target as the regular run target does. Again, for a list of available 
    properties which you can use, check the target you are overriding in the
    nbproject/build-impl.xml file. 

    -->
	<property name="jayatana-version" value="1.2.4"/>
	<property name="jayatana-jni-version" value="1.2.0"/>

	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="lib/ant-contrib-1.0b3.jar"/>
		</classpath>
	</taskdef>

	<scriptdef name="getubuntuversion" language="javascript">
		<attribute name="version"/>
		<![CDATA[
			importPackage(java.lang);
			importPackage(java.util);
			importPackage(java.io);
			var prop = new Properties();
			var fis = new FileInputStream("/etc/lsb-release");
			prop.load(fis);
			fis.close();
			project.setProperty(attributes.get("version"), prop.getProperty("DISTRIB_RELEASE"));
		]]>
	</scriptdef>
	<getubuntuversion version="ubuntu.version"/>
	<scriptdef name="getjavaarch" language="javascript">
		<attribute name="arch"/>
		<![CDATA[
			importPackage(java.lang);
			importPackage(java.util);
			importPackage(java.io);
			project.setProperty(attributes.get("arch"), System.getProperty("os.arch"));
		]]>
	</scriptdef>
	<getjavaarch arch="java.arch"/>
	
	<target name="-build-jni-local">
		<condition property="project.java.home" value="${platform.home}" else="${jdk.home}">
			<isset property="platform.home"/>
		</condition>
		<exec executable="make" dir="jayatana">
			<env key="JAVA_HOME" value="${project.java.home}"/>
			<arg line="build"/>
		</exec>
		<mkdir dir="${build.classes.dir}/native/${ubuntu.version}/amd64"/>
		<mkdir dir="${build.classes.dir}/native/${ubuntu.version}/i386"/>
		<copy file="jayatana/dist/Release/libjayatana.so"
			todir="${build.classes.dir}/native/${ubuntu.version}/${java.arch}"/>
	</target>
	
	<target name="-clean-jni-local">
		<condition property="project.java.home" value="${platform.home}" else="${jdk.home}">
			<isset property="platform.home"/>
		</condition>
		<exec executable="make" dir="jayatana">
			<env key="JAVA_HOME" value="${project.java.home}"/>
			<arg line="clean"/>
		</exec>
	</target>
	
	<!--
	
	Para incluir librerias de otras arquitecturas y versiones, se debe crear
	el archivo remote.properties en la raíz del proyecto con el siguiente contenido indicando el
	directorio HOME, version de ubuntu (xx.xx ej: 11.10) y arquitectura (i386 ó amd64) además
	de que el servidor remoto tiene que tener la variable de ambiente JAVA_HOME
	
	remote.connections=usuario:contraseña:servidor32:22:/home/ubuntu:11.10:i386,usuario:contraseña:servidor64:22:/home/ubuntu:11.10:amd64,...
	
	Para que el constructor ant incorpore las librerias nativas al jar.
	
	-->
	
	<scriptdef name="remoteproperties" language="javascript">
		<attribute name="remoteconnction"/>
		<![CDATA[
			var rc = attributes.get("remoteconnction").trim();
			var rcarray = rc.split(":");
			project.setProperty("remote.user", rcarray[0]);
			project.setProperty("remote.password", rcarray[1]);
			project.setProperty("remote.server", rcarray[2]);
			project.setProperty("remote.port", rcarray[3]);
			project.setProperty("remote.home", rcarray[4]);
			project.setProperty("remote.version", rcarray[5]);
			project.setProperty("remote.arch", rcarray[6]);
		]]>
	</scriptdef>
	
	<target name="-clean-jni-remote">
		<property file="remote.properties"/>
		<if>
			<equals arg1="${remote.connections}" arg2="$${remote.connections}"/>
			<then></then>
			<else>
				<for list="${remote.connections}" param="remote.connection">
					<sequential>
						<remoteproperties remoteconnction="@{remote.connection}"/>
						<sshexec host="${remote.server}" port="${remote.port}"
							username="${remote.user}" password="${remote.password}"
							command="rm -fr ${remote.home}/jayatana"
							failonerror="false"/>
					</sequential>
				</for>
			</else>
		</if>
	</target>
	
	<target name="-build-jni-remote">
		<property file="remote.properties"/>
		<if>
			<equals arg1="${remote.connections}" arg2="$${remote.connections}"/>
			<then></then>
			<else>
				<for list="${remote.connections}" param="remote.connection">
					<sequential>
						<remoteproperties remoteconnction="@{remote.connection}"/>
						<sshexec host="${remote.server}" port="${remote.port}"
							username="${remote.user}" password="${remote.password}"
							command="rm -fr ${remote.home}/jayatana ; mkdir -p ${remote.home}/jayatana"
							failonerror="false" trust="true"/>
						<scp todir="${remote.user}:${remote.password}@${remote.server}:${remote.home}/jayatana"
							port="${remote.port}"
							failonerror="false" trust="true">
							<fileset dir="jayatana">
								<exclude name="build/**"/>
								<exclude name="dist/**"/>
							</fileset>
						</scp>
						<sshexec host="${remote.server}" port="${remote.port}"
							username="${remote.user}" password="${remote.password}"
							command="cd ${remote.home}/jayatana ; make"
							failonerror="false" trust="true"/>
						<mkdir dir="${build.classes.dir}/native/${remote.version}/${remote.arch}"/>
						<scp file="${remote.user}:${remote.password}@${remote.server}:${remote.home}/jayatana/dist/Release/libjayatana.so"
							todir="${build.classes.dir}/native/${remote.version}/${remote.arch}"
							port="${remote.port}"
							failonerror="false" trust="true"/>
					</sequential>
				</for>
			</else>
		</if>
	</target>
	
	<target name="-build-unknow">
		<mkdir dir="${build.classes.dir}/native/UNKNOW/amd64"/>
		<mkdir dir="${build.classes.dir}/native/UNKNOW/i386"/>
		<copy file="${build.classes.dir}/native/${ubuntu.version}/amd64/libjayatana.so"
			todir="${build.classes.dir}/native/UNKNOW/amd64" failonerror="false"/>
		<copy file="${build.classes.dir}/native/${ubuntu.version}/i386/libjayatana.so"
			todir="${build.classes.dir}/native/UNKNOW/i386" failonerror="false"/>
	</target>
	
	<target name="-post-clean" depends="-clean-jni-local, -clean-jni-remote"/>
	<target name="-pre-jar" depends="-build-jni-local, -build-jni-remote, -build-unknow"/>
	
	<target name="-post-jar">
		<zip destfile="${dist.dir}/jayatana-${jayatana-version}-src.zip" basedir="src">
			<exclude name=".svn"/>
		</zip>
		
		<zip destfile="${dist.dir}/JAyatanaDemoProject.zip" basedir="plugins/jayatanademo">
			<exclude name=".svn"/>
			<exclude name="build"/>
			<exclude name="dist"/>
		</zip>
	</target>

	<target name="-installer-properties">
		<property name="build.dir" value="${user.home}/.jayatana-build"/>
		<property name="build.classes.dir" value="${build.dir}/classes"/>
		<property name="jayatana.classes" value="${build.classes.dir}/jayatana"/>
		<property name="gtkextended.classes" value="${build.classes.dir}/gtkextended"/>
		<property name="jayatanart6.classes" value="${build.classes.dir}/jayatanart6"/>
		<property name="jayatanart7.classes" value="${build.classes.dir}/jayatanart7"/>
		<property name="build.jar.dir" value="${build.dir}/lib"/>
		<property name="jayatana.jar" value="${build.jar.dir}/jayatana-${jayatana-version}.jar"/>
		<property name="gtkextended.jar" value="${build.jar.dir}/gtkextended-1.2.jar"/>
		<property name="jayatanart6.jar" value="${build.jar.dir}/jayatanart6-${jayatana-version}.jar"/>
		<property name="jayatanart7.jar" value="${build.jar.dir}/jayatanart7-${jayatana-version}.jar"/>
	</target>

	<target name="-installer-build-libraries">
		<if>
			<isset property="java.home.6"/>
			<then>
				<property name="current.java.home" value="${java.home.6}"/>
			</then>
			<elseif>
				<isset property="java.home.6"/>
				<then>
					<property name="current.java.home" value="${java.home.7}"/>
				</then>
			</elseif>
			<else>
				<property name="current.java.home" value="${java.home}/../"/>
				<if>
					<contains string="${java.version}" substring="1.7."/>
					<then>
						<property name="java.home.7" value="${java.home}/../"/>
					</then>
					<else>
						<property name="java.home.6" value="${java.home}/../"/>
					</else>
				</if>
			</else>
		</if>
		<!-- crear directorio de librerias -->
		<mkdir dir="${build.jar.dir}"/>
		<!-- crear libreria jayatana -->
		<exec executable="make" dir="jayatana">
			<env key="JAVA_HOME" value="${current.java.home}"/>
			<arg line="build"/>
		</exec>
		<mkdir dir="${jayatana.classes}"/>
		<copy file="jayatana/dist/Release/libjayatana.so"
			  todir="${build.jar.dir}"/>
		<javac srcdir="src" destdir="${jayatana.classes}" executable="${current.java.home}/bin/javac"
			   debug="false" includeantruntime="false" fork="yes"/>
		<jar basedir="${jayatana.classes}" jarfile="${jayatana.jar}"/>
		
		<!-- crear libreria gtkextended -->
		<mkdir dir="${gtkextended.classes}"/>
		<javac srcdir="plugins/gtkextended/src" destdir="${gtkextended.classes}" executable="${current.java.home}/bin/javac"
			   debug="false" includeantruntime="false" fork="yes"/>
		<jar basedir="${gtkextended.classes}" jarfile="${gtkextended.jar}"/>

		<!-- crear libreria jayatanart6 -->
		<if>
			<isset property="java.home.6"/>
			<then>
				<mkdir dir="${jayatanart6.classes}"/>
				<javac srcdir="plugins/jayatanart6/src" destdir="${jayatanart6.classes}" executable="${java.home.6}/bin/javac"
					   debug="false" includeantruntime="false" fork="yes">
					<classpath>
						<pathelement path="${jayatana.jar}"/>
						<pathelement path="${gtkextended.jar}"/>
						<pathelement path="lib/Netbeans Platform Libraries/org-openide-awt.jar"/>
						<pathelement path="lib/Netbeans Platform Libraries/org-openide-filesystems.jar"/>
					</classpath>
				</javac>
				<jar basedir="${jayatanart6.classes}" jarfile="${jayatanart6.jar}"/>
			</then>
		</if>
		
		<!-- crear libreria jayatanart7 -->
		<if>
			<isset property="java.home.7"/>
			<then>
				<mkdir dir="${jayatanart7.classes}"/>
				<javac srcdir="plugins/jayatanart7/src" destdir="${jayatanart7.classes}" executable="${java.home.7}/bin/javac"
					   debug="false" includeantruntime="false" fork="yes">
					<classpath>
						<pathelement path="${jayatana.jar}"/>
						<pathelement path="${gtkextended.jar}"/>
						<pathelement path="lib/Netbeans Platform Libraries/org-openide-awt.jar"/>
						<pathelement path="lib/Netbeans Platform Libraries/org-openide-filesystems.jar"/>
					</classpath>
				</javac>
				<jar basedir="${jayatanart7.classes}" jarfile="${jayatanart7.jar}"/>
			</then>
		</if>
	</target>

	<target name="install" depends="-installer-properties, -installer-build-libraries">
		<!-- instalar componentes -->
		<copy file="${build.jar.dir}/libjayatana.so" todir="/usr/lib/jayatana"/>
			<copy file="${jayatana.jar}" todir="/usr/lib/jayatana"/>
		<copy file="${gtkextended.jar}" todir="/usr/lib/jayatana"/>
		<if>
			<available file="${jayatanart6.jar}"/>
			<then>
				<copy file="${jayatanart6.jar}" todir="/usr/lib/jayatana"/>
			</then>
		</if>
		<if>
			<available file="${jayatanart7.jar}"/>
			<then>
				<copy file="${jayatanart7.jar}" todir="/usr/lib/jayatana"/>
			</then>
		</if>
		<symlink link="/usr/lib/jayatana/libjayatana.so.${jayatana-jni-version}"
			resource="/usr/lib/jayatana/libjayatana.so"/>

		<mkdir dir="/etc/jayatana.rules.d"/>
		<echo file="/etc/jayatana.rules.d/00netbeansplatform.rules"><![CDATA[# Filtro		clase personalizada de control de menu		startupWMClass
T:.*netbeans.*		org.java.ayatana.NetbeansPlatformMenuAction	netbeans
T:.*visualvm.*		org.java.ayatana.NetbeansPlatformMenuAction	visualvm]]></echo>
		
		<delete dir="${build.dir}"/>
	</target>

	<target name="deinstall" depends="-installer-properties">
		<delete dir="/usr/lib/jayatana"/>
		<delete dir="/etc/jayatana.rules.d"/>
	</target>
	<target name="uninstall" depends="deinstall"/>

	<target name="config">
		<if>
			<and>
				<not><isset property="java.home.7"/></not>
				<not><isset property="java.home.6"/></not>
			</and>
			<then>
				<if>
					<contains string="${java.version}" substring="1.7."/>
					<then><property name="java.home.7" value="${java.home}"/></then>
					<else><property name="java.home.6" value="${java.home}"/></else>
				</if>
			</then>
		</if>

		<if>
			<isset property="java.home.7"/>
			<then>
				<if>
					<available file="${java.home.7}/lib/rt.jar"/>
					<then>
						<mkdir dir="${java.home.7}/lib/endorsed"/>
						<symlink link="${java.home.7}/lib/endorsed/jayatana-${jayatana-version}.jar"
							resource="/usr/lib/jayatana/jayatana-${jayatana-version}.jar"/>
						<symlink link="${java.home.7}/lib/endorsed/gtkextended-1.2.jar"
							resource="/usr/lib/jayatana/gtkextended-1.2.jar"/>
						<symlink link="${java.home.7}/lib/endorsed/jayatanart7-${jayatana-version}.jar"
							resource="/usr/lib/jayatana/jayatanart7-${jayatana-version}.jar"/>
					</then>
					<elseif>
						<available file="${java.home.7}/jre/lib/rt.jar"/>
						<then>
							<mkdir dir="${java.home.7}/jre/lib/endorsed"/>
							<symlink link="${java.home.7}/jre/lib/endorsed/jayatana-${jayatana-version}.jar"
								resource="/usr/lib/jayatana/jayatana-${jayatana-version}.jar"/>
							<symlink link="${java.home.7}/jre/lib/endorsed/gtkextended-1.2.jar"
								resource="/usr/lib/jayatana/gtkextended-1.2.jar"/>
							<symlink link="${java.home.7}/jre/lib/endorsed/jayatanart7-${jayatana-version}.jar"
								resource="/usr/lib/jayatana/jayatanart7-${jayatana-version}.jar"/>
						</then>
					</elseif>
					<else>
						<echo message="Invalid JAVA_HOME_7=${java.home.7}"/>
					</else>
				</if>
			</then>
		</if>
		<if>
			<isset property="java.home.6"/>
			<then>
				<if>
					<available file="${java.home.6}/lib/rt.jar"/>
					<then>
						<mkdir dir="${java.home.6}/lib/endorsed"/>
						<symlink link="${java.home.6}/lib/endorsed/jayatana-${jayatana-version}.jar"
							resource="/usr/lib/jayatana/jayatana-${jayatana-version}.jar"/>
						<symlink link="${java.home.6}/lib/endorsed/gtkextended-1.2.jar"
							resource="/usr/lib/jayatana/gtkextended-1.2.jar"/>
						<symlink link="${java.home.6}/lib/endorsed/jayatanart6-${jayatana-version}.jar"
							resource="/usr/lib/jayatana/jayatanart6-${jayatana-version}.jar"/>
					</then>
					<elseif>
						<available file="${java.home.6}/jre/lib/rt.jar"/>
						<then>
							<mkdir dir="${java.home.6}/jre/lib/endorsed"/>
							<symlink link="${java.home.6}/jre/lib/endorsed/jayatana-${jayatana-version}.jar"
								resource="/usr/lib/jayatana/jayatana-${jayatana-version}.jar"/>
							<symlink link="${java.home.6}/jre/lib/endorsed/gtkextended-1.2.jar"
								resource="/usr/lib/jayatana/gtkextended-1.2.jar"/>
							<symlink link="${java.home.6}/jre/lib/endorsed/jayatanart6-${jayatana-version}.jar"
								resource="/usr/lib/jayatana/jayatanart6-${jayatana-version}.jar"/>
						</then>
					</elseif>
					<else>
						<echo message="Invalid JAVA_HOME_6=${java.home.6}"/>
					</else>
				</if>
			</then>
		</if>
	</target>

	<target name="deconfig">
		<if>
			<and>
				<not><isset property="java.home.7"/></not>
				<not><isset property="java.home.6"/></not>
			</and>
			<then>
				<if>
					<contains string="${java.version}" substring="1.7."/>
					<then><property name="java.home.7" value="${java.home}"/></then>
					<else><property name="java.home.6" value="${java.home}"/></else>
				</if>
			</then>
		</if>

		<if>
			<isset property="java.home.7"/>
			<then>
				<if>
					<available file="${java.home.7}/lib/rt.jar"/>
					<then>
						<symlink link="${java.home.7}/lib/endorsed/jayatana-${jayatana-version}.jar" action="delete"/>
						<symlink link="${java.home.7}/lib/endorsed/gtkextended-1.2.jar" action="delete"/>
						<symlink link="${java.home.7}/lib/endorsed/jayatanart7-${jayatana-version}.jar" action="delete"/>
					</then>
					<elseif>
						<available file="${java.home.7}/jre/lib/rt.jar"/>
						<then>
							<symlink link="${java.home.7}/jre/lib/endorsed/jayatana-${jayatana-version}.jar" action="delete"/>
							<symlink link="${java.home.7}/jre/lib/endorsed/gtkextended-1.2.jar" action="delete"/>
							<symlink link="${java.home.7}/jre/lib/endorsed/jayatanart7-${jayatana-version}.jar" action="delete"/>
						</then>
					</elseif>
					<else>
						<echo message="Invalid JAVA_HOME_7=${java.home.7}"/>
					</else>
				</if>
			</then>
		</if>
		<if>
			<isset property="java.home.6"/>
			<then>
				<if>
					<available file="${java.home.6}/lib/rt.jar"/>
					<then>
						<symlink link="${java.home.6}/lib/endorsed/jayatana-${jayatana-version}.jar" action="delete"/>
						<symlink link="${java.home.6}/lib/endorsed/gtkextended-1.2.jar" action="delete"/>
						<symlink link="${java.home.6}/lib/endorsed/jayatanart6-${jayatana-version}.jar" action="delete"/>
					</then>
					<elseif>
						<available file="${java.home.6}/jre/lib/rt.jar"/>
						<then>
							<symlink link="${java.home.6}/jre/lib/endorsed/jayatana-${jayatana-version}.jar" action="delete"/>
							<symlink link="${java.home.6}/jre/lib/endorsed/gtkextended-1.2.jar" action="delete"/>
							<symlink link="${java.home.6}/jre/lib/endorsed/jayatanart6-${jayatana-version}.jar" action="delete"/>
						</then>
					</elseif>
					<else>
						<echo message="Invalid JAVA_HOME_6=${java.home.6}"/>
					</else>
				</if>
			</then>
		</if>
	</target>
</project>
